name: CI/CD Pipeline - Develop Branch

on:
  push:
    branches:
      - develop # Déclenche le workflow sur les push vers la branche 'develop'
  pull_request:
    branches:
      - develop # Déclenche le workflow sur les Pull Requests ciblant la branche 'develop'

jobs:
  build-and-test:
    runs-on: ubuntu-latest # Utilise un runner Ubuntu récent fourni par GitHub

    steps:
      - name: Checkout code # Étape 1 : Récupérer le code source
        uses: actions/checkout@v4

      - name: Set up Docker Buildx # Étape 2 : Configurer Docker Buildx pour des builds optimisés
        uses: docker/setup-buildx-action@v3

      # --- Configuration pour la phase de test ---
      - name: Set environment variables for testing # Étape 3 : Définir les variables d'environnement pour la phase de test
        run: |
          echo "APP_ENV=dev" >> $GITHUB_ENV # Utilise l'environnement 'dev' pour les tests
          echo "ENV_FILE=.env.dev" >> $GITHUB_ENV # Indique d'utiliser le fichier .env.dev
        # Assurez-vous que votre fichier .env.dev existe dans votre dépôt
        # et contient des identifiants de base de données appropriés pour un environnement de test local.

      - name: Build Docker Compose Services for Tests # Étape 4 : Construire les services Docker pour les tests
        # Ceci utilisera l'APP_ENV=dev et ENV_FILE=.env.dev définis précédemment.
        run: docker-compose build web db # On construit les services 'web' et 'db'

      - name: Run PHPUnit Tests # Étape 5 : Exécuter tous les tests unitaires
        # PHPUnit s'exécute à l'intérieur du conteneur 'web'
        run: docker-compose run --rm web vendor/bin/phpunit tests/Unit/ tests/Controllers/
        # Assurez-vous que PHPUnit est installé dans votre Dockerfile pour le service 'web'.
        # Le '--rm' nettoie le conteneur après exécution.

      - name: Clean up test containers # Étape 6 : Nettoyer les conteneurs de test
        # Toujours exécuter pour s'assurer que les ressources sont libérées, même si les tests échouent.
        if: always()
        run: docker-compose down -v

      # --- Configuration pour la phase de build de production ---
      - name: Build Production Docker Image # Étape 7 : Construire l'image Docker de production (seulement si les tests ont réussi)
        # On définit de nouvelles variables d'environnement pour cette étape
        # afin d'utiliser les paramètres de production.
        run: |
          echo "APP_ENV=prod" >> $GITHUB_ENV # Utilise l'environnement 'prod' pour le build final
          echo "ENV_FILE=.env.prod" >> $GITHUB_ENV # Indique d'utiliser le fichier .env.prod
          docker-compose build web # On reconstruit le service 'web' pour la production
      - name: Log in to Docker Hub # Étape 8 (Optionnel) : Se connecter à Docker Hub
        if: success() # S'exécute seulement si toutes les étapes précédentes ont réussi
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Tag and Push Docker Image # Étape 9 (Optionnel) : Taguer et pousser l'image de production
        if: success() # S'exécute seulement si toutes les étapes précédentes ont réussi
        run: |
          # Remplacez 'your-dockerhub-username/your-app-name' par le nom désiré pour votre image sur Docker Hub.
          # Le nom de l'image construite par 'docker-compose build web' sera généralement basé sur le nom
          # de votre dossier de projet et le nom du service (ex: 'monprojet_web').
          # Vous pouvez le vérifier localement avec 'docker images' après un 'docker-compose build'.
          
          # Exemple : Si votre dossier de projet est 'videgrenier' et votre service est 'web',
          # l'image locale sera 'videgrenier_web'.
          TARGET_IMAGE_NAME="your-dockerhub-username/videgrenier-web" # Adaptez ce nom !
          
          # Tag l'image construite avec 'latest' et le SHA du commit actuel.
          # docker-compose images -q web' permet de récupérer l'ID de l'image du service 'web'.
          docker tag $(docker-compose images -q web) $TARGET_IMAGE_NAME:latest
          docker tag $(docker-compose images -q web) $TARGET_IMAGE_NAME:${{ github.sha }}
          
          # Pousse les images vers le registry.
          docker push $TARGET_IMAGE_NAME:latest
          docker push $TARGET_IMAGE_NAME:${{ github.sha }}
      # --- Fin de la partie Optionnelle ---