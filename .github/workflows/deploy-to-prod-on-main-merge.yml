# Workflow: CI/CD pour l'image de production
# Ce workflow se déclenche lors d'un push sur la branche 'main'.
# Il est responsable de la construction et du push de l'image Docker de production
# vers le GitHub Container Registry (GHCR), et de la création d'un tag de version.

name: CI/CD - Build, Push Prod Image & Tag (on Push to Main)

on:
  push:
    branches:
      - main # Se déclenche lors d'un push sur la branche principale (main)

env:
  REGISTRY: ghcr.io # Registre de conteneurs GitHub
  IMAGE_NAME: ${{ github.repository }} # Nom de l'image Docker (ex: mon-org/mon-repo)
  APP_ENV_PROD: prod # Variable d'environnement pour l'application en production
  APACHE_CONF_PROD: prod.conf # Fichier de configuration Apache pour la production

jobs:
  build-and-push-prod:
    runs-on: ubuntu-latest # Exécute le job sur une machine virtuelle Ubuntu

    permissions:
      contents: write # Permet de lire et écrire le contenu du dépôt (nécessaire pour les tags)
      packages: write # Permet de pousser des packages (images Docker) vers GHCR

    steps:
      - name: Checkout repository # Étape pour cloner le dépôt Git
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Nécessaire pour que git tag fonctionne correctement

      - name: Set up Docker Buildx # Configure Docker Buildx pour des builds performants
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry # Connexion au registre GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Construire et pousser l'image Docker de production
      # L'image est taguée avec le SHA du commit.
      - name: Build and Push Prod Docker Image
        uses: docker/build-push-action@v5
        with:
          context: . # Contexte de build (répertoire racine du dépôt)
          file: ./Dockerfile # Chemin vers le Dockerfile
          push: true # Indique de pousser l'image vers le registre
          
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} # Tag basé sur le SHA du commit
          build-args: |
            APP_ENV=${{ env.APP_ENV_PROD }}
            APACHE_CONF=${{ env.APACHE_CONF_PROD }}
          cache-from: type=gha # Utilise le cache GitHub Actions pour accélérer les builds
          cache-to: type=gha,mode=max # Met en cache l'image pour les builds futurs

      - name: Create and Push Git Tag # Crée et pousse le tag de version
        run: |
          TAG_NAME="V.1.2-${{ github.run_number }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a $TAG_NAME -m "Release $TAG_NAME"
          git push origin $TAG_NAME

      - name: "Workflow Complete" # Message de confirmation
        run: |
          echo "L'image Docker de production a été construite et poussée avec succès."
          echo "Le tag $TAG_NAME a été créé et poussé."
