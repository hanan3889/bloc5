name: CI - Test PHP

on:
  push:
    branches:
      - develop
      - main
  pull_request:
    branches:
      - develop
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest # Utilise un exécuteur (runner) Ubuntu récent fourni par GitHub

    steps:
      - name: Récupérer le code source
        uses: actions/checkout@v4 # <-- Mis à jour à v4

      # Cette étape installe Docker et Docker Compose. Bien que nous n'utilisions plus docker-compose pour le build/run ici,
      # elle assure que Docker est entièrement prêt sur l'exécuteur.
      - name: Configurer Docker
        uses: docker/setup-docker@v3 # <-- CORRECTION DE L'INDENTATION ICI : 'uses' doit être aligné avec 'name'

      - name: Configurer Docker Buildx # Gardez cette étape pour les optimisations de build
        uses: docker/setup-buildx-action@v3

      - name: Créer le fichier .env.dev de manière sécurisée à partir des secrets
        run: |
          cat <<EOF > .env.dev
          # Ces variables sont pour l'application tournant À L'INTÉRIEUR du conteneur
          # et seront utilisées par votre application PHP.
          ENV_FILE=.env.dev
          APACHE_CONF=${{ secrets.APACHE_CONF_DEV }} # Assurez-vous que ce secret contient la conf Apache pour le dev
          APP_ENV=dev # Force l'environnement 'dev' pour les tests
          APP_PORT=8080
          DB_PORT=3306
          MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE_DEV }} # Assurez-vous d'avoir un secret dédié pour la BDD de test/dev
          MYSQL_USER=${{ secrets.MYSQL_USER_DEV }}
          MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD_DEV }}
          MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD_DEV }}
          # Assurez-vous que ces valeurs correspondent aux paramètres de connexion de votre application pour les tests
          DB_CONNECTION=mysql
          DB_HOST=db # Important : Ce sera le nom de service du conteneur de base de données
          DB_DATABASE=${{ secrets.MYSQL_DATABASE_DEV }}
          DB_USERNAME=${{ secrets.MYSQL_USER_DEV }}
          DB_PASSWORD=${{ secrets.MYSQL_PASSWORD_DEV }}
          EOF
        # Note : Vous devez avoir des secrets séparés pour les identifiants de BDD de l'environnement de dev,
        # par ex. MYSQL_DATABASE_DEV, MYSQL_USER_DEV, etc.
        # Et assurez-vous que APACHE_CONF_DEV est défini comme secret pour la configuration Apache de l'environnement de dev.

      # --- Configuration de la Base de Données pour les Tests ---
      - name: Démarrer la base de données MySQL pour les tests
        run: |
          docker run --name test-db -d \
            -p 3306:3306 \
            -e MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD_DEV }} \
            -e MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE_DEV }} \
            -e MYSQL_USER=${{ secrets.MYSQL_USER_DEV }} \
            -e MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD_DEV }} \
            mysql:8 # Utilisez la version exacte que vous avez dans votre docker-compose.yaml
          
          # Attendre que la base de données soit prête
          echo "Attente de la base de données..."
          sleep 15 # Laisser un peu plus de temps pour le démarrage
          # Boucle de vérification de la connexion à la BDD
          for i in $(seq 1 10); do
            docker exec test-db mysqladmin ping -h localhost --silent && break
            echo "La BDD n'est pas encore prête, attente de 5s..."
            sleep 5
          done
          docker exec test-db mysqladmin ping -h localhost --silent || { echo "La BDD n'a pas démarré à temps!"; exit 1; }
          echo "La base de données est prête !"

      # --- Build et Exécution des Tests ---
      - name: Construire l'image Docker de l'application pour les tests
        run: |
          docker build \
            --build-arg APP_ENV=dev \
            --build-arg APACHE_CONF=${{ secrets.APACHE_CONF_DEV }} \
            -t mon-app:test . # Tag l'image pour le test

      - name: Exécuter les tests PHPUnit
        run: |
          docker run --rm \
            --link test-db:db \
            -v "$(pwd)":/var/www/html \
            -e ENV_FILE=.env.dev \
            mon-app:test phpunit tests/Unit/ tests/Controllers/ # Utilise phpunit global et spécifie les répertoires de tests
        # --link test-db:db : Lie le conteneur de base de données au conteneur de l'application.
        #                  L'application peut alors accéder à la BDD via le nom d'hôte 'db'.
        # -v "$(pwd)":/var/www/html : Monte votre code actuel dans le conteneur, assurant l'utilisation des dernières modifications.
        # -e ENV_FILE=.env.dev : S'assure que l'application dans le conteneur utilise le fichier .env.dev créé.

      # --- Build de l'Image de Production (si les tests réussissent) ---
      - name: Construire l'image Docker de production
        if: success() # S'exécute seulement si les tests précédents ont réussi
        run: |
          # Définir les variables d'environnement pour le build de production
          echo "APP_ENV=prod" >> $GITHUB_ENV
          echo "ENV_FILE=.env.prod" >> $GITHUB_ENV
          docker build \
            --build-arg APP_ENV=prod \
            --build-arg APACHE_CONF=${{ secrets.APACHE_CONF_PROD }} \
            -t your-dockerhub-username/videgrenier-web:latest \
            -t your-dockerhub-username/videgrenier-web:${{ github.sha }} \
            .
        # Note : Vous aurez besoin d'un nouveau secret APACHE_CONF_PROD si différent de dev.
        # Remplacez 'your-dockerhub-username/videgrenier-web' par le nom de votre image.

      # --- Push de l'Image (Optionnel) ---
      - name: Se connecter à Docker Hub
        if: success()
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Taguer et pousser l'image Docker
        if: success()
        run: |
          TARGET_IMAGE_NAME="your-dockerhub-username/videgrenier-web" # Adaptez ce nom !
          docker push $TARGET_IMAGE_NAME:latest
          docker push $TARGET_IMAGE_NAME:${{ github.sha }}

      # --- Nettoyage ---
      - name: Arrêter et supprimer le conteneur de base de données de test
        if: always() 
        run: docker rm -f test-db