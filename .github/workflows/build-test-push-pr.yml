# .github/workflows/build-test-push-pr.yml
name: Build, Test & Push Docker Image (Preprod PR)

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - preprod # Se déclenche pour les PR ciblant 'preprod'

env:
  REGISTRY: ghcr.io # GitHub Container Registry
  IMAGE_NAME: ${{ github.repository }} # Nom de l'image (ex: votre-org/votre-repo)
  APP_ENV_CI: dev # Force l'environnement à 'dev' pour le build de l'image Docker de CI (installe PHPUnit)
  APACHE_CONF_CI: dev.conf # Nom du fichier de configuration Apache à utiliser

jobs:
  build-test-push:
    runs-on: ubuntu-latest # Exécute sur une machine Ubuntu

    permissions:
      contents: read
      packages: write # Nécessaire pour pousser l'image vers GitHub Container Registry

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # NOUVELLE ÉTAPE: Configurer Docker Buildx avec le driver 'docker-container'
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3 # Utilise l'action pour configurer Buildx

      # Étape 1: Se connecter à GitHub Container Registry (ghcr.io)
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Étape 2: Construire l'image Docker (maintenant avec le cache Buildx fonctionnel)
      - name: Build Docker image
        id: build-docker-image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          load: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.pull_request.number }}
          build-args: |
            APP_ENV=${{ env.APP_ENV_CI }}
            APACHE_CONF=${{ env.APACHE_CONF_CI }}
          cache-from: type=gha # Maintenant supporté
          cache-to: type=gha,mode=max # Maintenant supporté

      # Étape 3: Exécuter les tests PHPUnit à l'intérieur du conteneur Docker buildé
      - name: Run PHPUnit tests inside Docker container
        run: |
          echo "Running PHPUnit tests inside the Docker container..."
          docker run --rm \
            -v $(pwd):/var/www/html \
            -e APP_ENV=${{ env.APP_ENV_CI }} \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.pull_request.number }} \
            /usr/local/bin/phpunit --verbose tests/Controllers/ProductControllerTest.php

      # Étape 4 (Optionnel): Vérification rapide de l'application dans le conteneur
      - name: Basic application container verification
        run: |
          echo "Starting Docker container for basic verification..."
          docker run -d \
            --name my-app-test \
            -p 8080:80 \
            -e APP_ENV=${{ env.APP_ENV_CI }} \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.pull_request.number }}
          echo "Container 'my-app-test' started on port 8080. Waiting 10 seconds..."
          sleep 10
          echo "Stopping and removing container 'my-app-test'..."
          docker stop my-app-test || true
          docker rm my-app-test || true

      # Étape 5: Pousser l'image vers GitHub Container Registry (ghcr.io)
      - name: Push Docker image to GitHub Container Registry
        if: success()
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.pull_request.number }}
          build-args: |
            APP_ENV=${{ env.APP_ENV_CI }}
            APACHE_CONF=${{ env.APACHE_CONF_CI }}
          cache-from: type=gha
          cache-to: type=gha,mode=max