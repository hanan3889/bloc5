# .github/workflows/build-test-push-pr.yml
name: Build, Test & Push Docker Image (Preprod PR)

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - preprod # Se déclenche pour les PR ciblant 'preprod'

env:
  REGISTRY: ghcr.io # GitHub Container Registry
  IMAGE_NAME: ${{ github.repository }} # Nom de l'image (ex: votre-org/votre-repo)
  APP_ENV_CI: dev # Force l'environnement à 'dev' pour le build de l'image Docker de CI (installe PHPUnit)
  APACHE_CONF_CI: 000-default.conf # Nom du fichier de configuration Apache à utiliser

jobs:
  build-test-push:
    runs-on: ubuntu-latest # Exécute sur une machine Ubuntu

    permissions:
      contents: read
      packages: write # Nécessaire pour pousser l'image vers GitHub Container Registry

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Étape 1: Se connecter à GitHub Container Registry (ghcr.io)
      # Le GITHUB_TOKEN est automatiquement disponible et a les permissions 'packages:write'
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }} # Nom d'utilisateur GitHub de l'acteur qui déclenche le workflow
          password: ${{ secrets.GITHUB_TOKEN }} # Token fourni automatiquement par GitHub Actions

      # Étape 2: Construire l'image Docker
      - name: Build Docker image
        id: build-docker-image
        uses: docker/build-push-action@v5
        with:
          context: . # Le contexte de build est la racine du dépôt
          file: ./Dockerfile # Spécifie explicitement le chemin de votre Dockerfile
          push: false # Ne pas pousser tout de suite, nous allons la tester d'abord
          load: true # Charge l'image dans le démon Docker de l'exécuteur pour l'étape de test
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.pull_request.number }}
          build-args: |
            APP_ENV=${{ env.APP_ENV_CI }}
            APACHE_CONF=${{ env.APACHE_CONF_CI }}
          cache-from: type=gha # Utilise le cache GitHub Actions pour accélérer les builds
          cache-to: type=gha,mode=max # Met en cache pour les prochains builds

      # Étape 3: Exécuter les tests PHPUnit à l'intérieur du conteneur Docker buildé
      # C'est la meilleure approche puisque PHPUnit est installé dans l'image pour APP_ENV=dev
      - name: Run PHPUnit tests inside Docker container
        run: |
          echo "Running PHPUnit tests inside the Docker container..."
          # Lance un conteneur temporaire à partir de l'image buildée
          # et exécute la commande phpunit.
          # Assurez-vous que PHPUnit est bien accessible via /usr/local/bin/phpunit dans le conteneur
          docker run --rm \
            -v $(pwd):/var/www/html \
            -e APP_ENV=${{ env.APP_ENV_CI }} \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.pull_request.number }} \
            /usr/local/bin/phpunit --verbose tests/Controllers/ProductControllerTest.php # ASSUREZ-VOUS QUE CE CHEMIN EST CORRECT

      # Étape 4 (Optionnel): Vérification rapide de l'application dans le conteneur
      # Cette étape est purement informative pour voir si le conteneur démarre.
      - name: Basic application container verification
        run: |
          echo "Starting Docker container for basic verification..."
          docker run -d \
            --name my-app-test \
            -p 8080:80 \
            -e APP_ENV=${{ env.APP_ENV_CI }} \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.pull_request.number }}
          echo "Container 'my-app-test' started on port 8080. Waiting 10 seconds..."
          sleep 10

          echo "Stopping and removing container 'my-app-test'..."
          docker stop my-app-test || true
          docker rm my-app-test || true

      # Étape 5: Pousser l'image vers GitHub Container Registry (ghcr.io)
      # Cette étape ne sera exécutée que si toutes les étapes précédentes (build et tests) ont réussi.
      - name: Push Docker image to GitHub Container Registry
        if: success() # Pousse seulement si toutes les étapes précédentes ont réussi
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true # C'est ici que l'image est PUSHÉE
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.pull_request.number }}
          build-args: |
            APP_ENV=${{ env.APP_ENV_CI }}
            APACHE_CONF=${{ env.APACHE_CONF_CI }}
          cache-from: type=gha # Utilise le cache pour un push plus rapide
          cache-to: type=gha,mode=max